"use client";
import React, { useRef, useState, useEffect } from "react";
// import { Link, useNavigate } from "react-router-dom";
import { imgx } from "../../../assets";
import { getRandomPrompt } from "../../../utils";
import { FormField, Loader } from "../../../components";

// import { usePollinationsImage } from "@pollinations/react";

const CreatePost = () => {
  const [imageURL, setImageURL] = useState(imgx);
  const [generatingImg, setGeneratingImg] = useState(false);

  const defaultForm = {
    name: "Miles Shepherd",
    prompt:
      "a desert caravan traveling under a star-filled night sky, led by camels and lanterns",
    photo: "",
    width: 1920,
    height: 1080,
    seed: Math.floor(Math.random() * 100000000000),
  };
  const [form, setForm] = useState(defaultForm);



  useEffect(() => {
    const savedForm = localStorage.getItem("formData");

    if (savedForm) {
      setForm(JSON.parse(savedForm));
    }
  }, []);

  useEffect(() => {
    const imageUrl = `https://pollinations.ai/p/${encodeURIComponent(
      form.prompt
    )}?width=${form.width}&height=${form.height}&seed=${form.seed}&model=${
      form.model
    }&nologo=true`;
    setForm((prev) => ({
      ...prev,
      photo: imageUrl,
    }));

    const savedForm = localStorage.getItem("formData");

    if (savedForm) {
      setForm((prevForm) => ({
        ...prevForm,
        photo: imgx,
      }));
      setForm(JSON.parse(savedForm));
    }
  }, []);

  const generateImg = async () => {
    if (!form.prompt) {
      alert("Please provide a prompt");
      return;
    }

    try {
      setGeneratingImg(true);

      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: form.prompt,
          width: form.width,
          height: form.height,
          seed: form.seed,
          name: form.name,
        }),
      });

      const data = await response.json();

      if (data.success) {
        setForm({ ...form, prompt: data.prompt, photo: data.imageUrl });
        localStorage.setItem(
          "formData",
          JSON.stringify({ ...form, prompt: data.prompt, photo: data.imageUrl })
        );
      } else {
        throw new Error(data.error || "Failed to generate image");
      }
    } catch (error) {
      alert(error.message);
    } finally {
      setGeneratingImg(false);
    }
  };

  const handleChange = (e) => {
    const { id, value } = e.target;

    const updatedForm = {
      ...form,
      [id]:
        id === "width" && value > 2160
          ? 2160
          : id === "height" && value > 2160
          ? 2160
          : id === "seed" && value > 100000000000
          ? 100000000000
          : value,
    };

    setForm(updatedForm);
  };

  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt();
    const updatedForm = { ...form, prompt: randomPrompt };
    setForm(updatedForm);
  };

  return (
    <section
      style={{ backgroundImage: `url(${form.photo})` }}
      className="w-full bg-cover p-5 min-h-screen"
    >
      <div
        className="p-5  
              sm:w-11/12 sm:mx-auto sm:mt-10
              md:w-11/12 md:mx-auto
              lg:w-11/12 lg:mx-auto lg:grid lg:grid-cols-12 lg:gap-4 lg:mt-10 
              backdrop-blur-lg bg-white bg-opacity-35 rounded-[1rem] shadow-xl"
      >
        <div className="col-span-4 xs:w-full md:w-fill flex flex-col h-full">
          <div>
            <h1 className="font-extrabold mb-2 text-black text-4xl">
              Create Aglaia Pix
            </h1>
            <p className="text-gray-900 text-lg">
              Create stunning and imaginative images generated by AI, and
              showcase your creativity to the world.
            </p>
          </div>
          <form className="flex flex-col flex-grow">
            <div className="flex flex-col gap-5 flex-grow">
              <FormField
                prompt
                labelName="Your Name"
                type="text"
                name="name"
                placeholder="FrostKnight"
                value={form.name}
                handleChange={handleChange}
                doWhat="submit"
              />
              <FormField
                prompt
                labelName="Prompt"
                type="textarea"
                name="prompt"
                placeholder="a futuristic sports car racing through a neon-lit city, its engine roaring and lights flashing"
                value={form.prompt}
                handleChange={handleChange}
                isSurpriseMe
                handleSurpriseMe={handleSurpriseMe}
              />
              <FormField
                handleChange={handleChange}
                dospecify
                width={form.width}
                height={form.height}
                seed={form.seed}
              />
            </div>
            <button
              type="button"
              onClick={generateImg}
              className="mt-5 mb-5 w-full font-semibold text-[#150dff] px-5 rounded-[5px] bg-gray-200 active:bg-[#48ff00] active:text-black hover:bg-black hover:text-white py-2"
            >
              {generatingImg ? "Generating..." : "Generate"}
            </button>
          </form>
        </div>
        <div className="col-span-8">
          <div className="lg:pl-8 grid grid-rows h-fit">
            <div className="relative bg-grey-50 border border-gray-300 rounded-lg text-sm focus:ring-blue-500 focus:border-blue-500 p-2 flex items-center justify-center">
              {form.photo ? (
                <img
                  src={form.photo}
                  alt={form.prompt}
                  className="mx-auto p-0  object-contain rounded-lg"
                />
              ) : (
                <img
                  src={imgx}
                  alt="preview"
                  className="mx-auto p-0 object-contain opacity-80"
                />
              )}
              {generatingImg && (
                <div className="absolute inset-0 bg-black bg-[rgba(0,0,0,0.5)] flex items-center justify-center rounded-lg">
                  <Loader />
                </div>
              )}
            </div>
            <div className="mt-auto w-full">
              <div className="mt-5 text-xs text-center">
                <p>
                  Created a stunning masterpiece? Share it with the Community!
                </p>
              </div>
              <button className="mt-3 text-orange-600 font-bold w-full h-10 bg-black px-5 rounded-[5px] active:bg-[#48ff00] active:text-black hover:bg-black hover:text-white py-2">
                Share with The Community!
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default CreatePost;
