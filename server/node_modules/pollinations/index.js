class Pollinations {
   /**
     * @param {Object} [options={}] - Options for the Pollinations class.
     * @param {number} options.images - Number of images to generate and return.
     * @param {number} options.width - Width of the images.
     * @param {number} options.height - Height of the images.
     * @param {number} options.seed- Seed used to generate images.
     * @param {boolean} options.nologo - Whether or not the images should include the Pollinations logo.
     * @example
     * const Pollinations = require("pollinations.js");
     * const pollinations = new Pollinations({
     *   images: 2,
     *   height: 750,
     *   width: 700,
     *   nologo: true
     * });
     */
   constructor(options = {}) {
      const {
         images = 1,
         width = 512,
         height = 512,
         seed = -1,
         nologo = false
      } = options || {}

      // Type checks
      const propertyChecks = [
         { name: 'images', type: 'number' },
         { name: 'width', type: 'number' },
         { name: 'height', type: 'number' },
         { name: 'seed', type: 'number' },
         { name: 'nologo', type: 'boolean' }
      ];

      propertyChecks.forEach(({ name, type }) => {
         if (options[name] !== undefined && typeof options[name] !== type) {
            throw new TypeError(`new Pollinations(...) -> Invalid type for property '${name}'. Expected a ${type}, but got ${typeof options[name]}`)
         }
      })

      if(images > 4){
         throw new Error("To prevent abuses, pollinations.js limits the number of images to 4.")
      }

      this.images = images
      this.width = width
      this.height = height
      this.seed = seed
      this.nologo = nologo
   }

   /**
     * @param {Object} [options={}] - Images options (optional).
     * @param {string} options.prompt - Prompt of the image to generate
     * @param {number} options.images - Number of images to generate
     * @param {number} options.width - Width of the images
     * @param {number} options.height - Height of the images
     * @param {number} options.seed- Seed used to generate images
     * @param {boolean} options.nologo - Whether or not the images should include the Pollinations logo
     * @example
     * const Pollinations = require("pollinations.js");
     * const pollinations = new Pollinations({
     *   images: 2,
     *   height: 750,
     *   width: 700,
     *   nologo: true
     * });
     */
   async generate(options) {

      const {
         prompt = options?.["prompt"] || "A dog wearing sunglasses",
         images = this.images,
         width = this.width,
         height = this.height,
         seed = this.seed,
         nologo = this.nologo
      } = options || {}

      const propertyChecks = [
         { name: 'prompt', value: prompt, type: 'string' },
         { name: 'images', value: images, type: 'number' },
         { name: 'width', value: width, type: 'number' },
         { name: 'height', value: height, type: 'number' },
         { name: 'seed', value: seed, type: 'number' },
         { name: 'nologo', value: nologo, type: 'boolean' },
      ]

      propertyChecks.forEach(({ name, value, type }) => {
         if (value !== undefined && typeof value !== type) {
            throw new TypeError(`Pollinations.generate(...) -> Invalid type for property '${name}'. Expected a ${type}, but got ${typeof value}`)
         }
      })

      if(images > 4){
         throw new Error("To prevent abuses, pollinations.js limits the number of images to 4.")
      }

      var requestSuccess = 0
      var responseObject = {
         requestId: require("uuid").v4(),
         prompt: prompt,
         width: width,
         height: height,
         seed: seed,
         nologo: nologo,
         expectedImages: images,
         isComplete: true,
         errors: 0,
         images: []
      }

      do {

         const URL = `https://image.pollinations.ai/prompt/${encodeURI(prompt)}?width=${width}&height=${height}&seed=${(seed === -1 ? Math.floor((Math.random() * 999999999) + 1) : seed)}&nologo=${nologo}`
         const response = await fetch(URL)

         if(response.ok){
            const arrayBuffer = await response.arrayBuffer()
            const imageBuffer = Buffer.from(arrayBuffer)
            requestSuccess++
            responseObject.images.push(imageBuffer)
         } else {
            responseObject.errors++
         }

      } while (requestSuccess < images && responseObject.errors < 3)

      if(responseObject.expectedImages !== responseObject.images.length){
         responseObject.isComplete = false
      }

      if(responseObject.errors === 3){
         return responseObject
      }

      return responseObject

   }

}

module.exports = Pollinations