import React, { useRef, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { preview } from '../assets/'
import { getRandomPrompt } from '../utils'
import { FormField, Loader } from '../components'

import { usePollinationsImage } from '@pollinations/react';

const CreatePost = () => {


    const navigate = useNavigate()
    const [form, setForm] = useState(() => {
        const savedForm = localStorage.getItem("formData");
        return savedForm ? JSON.parse(savedForm) : {
            name: '',
            prompt: '',
            photo: '',
        };
    });

    const [generatingImg, setGeneratingImg] = useState(false)
    const [loading, setLoading] = useState(false)
    const [dospecify, changespecify] = useState(true)

    // const getImageUrl = usePollinationsImage(
    //     form.prompt,
    //     {
    //         width: 720,
    //         height: 720,
    //         seed: Math.floor(Math.random() * 100),
    //         model: 'flux'
    //     }
    // );

    const generateImg = async () => {
        if (!form.prompt) {
            alert('Please provide a prompt');
            return;
        }
        try {
            setGeneratingImg(true);
            const response = await fetch('http://localhost:8090/api/v1/hf/', {
                method: 'POST', headers: {
                    'Content-Type': 'application/json',
                }, body: JSON.stringify({ prompt: form.prompt })
            });

            const data = await response.json();
            // setForm({ ...form, photo: `data.image/png;base64,${data.image.image}` });

            if (data.image) {
                // setForm({ ...form, photo: `data:image/png;base64,${data.image}` });
                localStorage.setItem("formData", JSON.stringify({ ...form, photo: data.image }));
                setForm({ ...form, photo: `${data.image}` });
            } else {
                console.error('No image data received');
            }

        } catch (error) {
            console.error('Error generating image:', error);
        } finally {
            setTimeout(() => {

                setGeneratingImg(false);
            }, 2000);
        }
    };

    const handleSubmit = async () => {
        // e.preventDefault();

        if (form.name && form.prompt && form.photo) {
            setLoading(true);

            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");


            const requestOptions = {
                method: "POST",
                headers: myHeaders,
                body: JSON.stringify(form),
            };
            try {
                const response = await fetch("http://localhost:8090/api/v1/post", requestOptions);
                // const response = await response.json();
                // alert(`Success: ${response.data._id}`);
                navigate('/');
            } catch (error) {
                console.log('Error storing data:', error);
            } finally {
                setLoading(false);
            }
        } else {
            alert('Please fill out all fields');
        }
    };


    const handleChange = (e) => {
        const { name, value } = e.target

        localStorage.setItem("formData", JSON.stringify({ ...form, name: value }));
        setForm({ ...form, [name]: value })
    }

    const handleSurpriseMe = () => {
        const randomPrompt = getRandomPrompt();
        localStorage.setItem("formData", JSON.stringify({ ...form, prompt: randomPrompt }));
        setForm({ ...form, prompt: randomPrompt });
    };

    return (
        <section
            className=' mx-auto bg-transparent p-5'>
            <div className=" p-5 h-fill

      sm:w-11/12 sm:mx-auto sm:mt-10
  md:w-11/12 md:mx-auto
  lg:w-11/12 lg:mx-auto  lg:grid  lg:grid-cols-12 lg:gap-4 lg:mt-10
        backdrop-blur-lg  bg-white bg-opacity-35 rounded-[1rem]  shadow-xl">

                <div className=' col-span-4 xs:w-full md:w-fill '>
                    <div>
                        <h1 className="font-extrabold mb-2 text-black text-4xl">Create Aglaia Pix</h1>
                        <p className="text-gray-900 text-lg">Create stunning and imaginative images generated by AI, and
                            showcase your creativity to the world.
                        </p>
                    </div>
                    <form className=' flex-shrink w-fill mt-10  ' onSubmit={handleSubmit}>
                        <div className="flex flex-col gap-5  ">
                            <FormField
                                labelName="Your Name"
                                type="text"
                                name="name"
                                placeholder="FrostKnight"
                                value={form.name}
                                handleChange={handleChange}
                                doWhat="submit"
                            />
                            <FormField
                                labelName="Prompt"
                                type="textarea"
                                name="prompt"
                                placeholder="An Impressionist oil painting of sunflowers in a purple vaseâ€¦"
                                value={form.prompt}
                                handleChange={handleChange}
                                isSurpriseMe
                                handleSurpriseMe={handleSurpriseMe}
                                dospecify
                            />
                            <button className='bg-[#151dff]  hover: active:bg-[black] text-white px-4 py-2 rounded-md' onClick={() => changespecify(!dospecify)}>
                                Image Specification
                            </button>
                        </div>
                        <div className='mt-auto mb-5 flex gap-5'>
                            <button
                                type='button'
                                onClick={generateImg}
                                className='mt-3 w-full font-semibold text-[#150dff] px-5 rounded-[5px] bg-gray-200 active:bg-[#48ff00] active:text-black hover:bg-black hover:text-white py-2'>
                                {generatingImg ? "Generating..." : "Generate"}
                            </button>
                        </div>
                    </form>
                </div>
                <div className="col-span-8  ">
                    <div className="lg:pl-8 grid grid-rows h-full ">
                        <div
                            className=' h-fit max-h-fill  relative bg-grey-50 border border-gray-300 rounded-lg text-sm focus:ring-blue-500 focus:border-blue-500 p-2 flex items-center justify-center'
                        >
                            {form.photo ? (<img
                                src={form.photo}
                                alt={form.prompt}
                                className=' mx-auto max-h-h-fit object-contain rounded-lg'
                            />) : (<img
                                src={preview}
                                alt="preview"
                                className='mx-auto object-contain opacity-50'
                            />)}
                            {generatingImg && (<div
                                className='absolute inset-0 bg-black bg-[rgba(0,0,0,0.5)] flex items-center justify-center rounded-lg'>
                                <Loader />
                            </div>)}
                        </div>
                        <div className='mt-auto'>
                            <div className='mt-5 text-xs text-center'>
                                <p>Created a stunning masterpiece? Share it with the Community!</p>
                            </div>
                            <button
                                className='mt-3 text-orange-600 font-bold w-full h-10 bg-black px-5 rounded-[5px] active:bg-[#48ff00] active:text-black hover:bg-black hover:text-white py-2'
                                onClick={handleSubmit}>
                                Share with The Community!
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    )
}

export default CreatePost


// const item = [
//     {
//         // prompt: "a whimsical treehouse village nestled in the treetops, connected by rope bridges and ladders",
//         width: 720,
//         height: 1280,
//         seed: 43,
//         model: "flux"
//     },
// ];


// const [prompt, setPrompt] = useState("")

// // const [imageUrl, setImageUrl] = usePollinationsImage(prompt, {
//     width: item[0].width,
//     height: item[0].height,
//     seed: item[0].seed,
//     model: item[0].model
// })

// const handleSubmit = (e) => {
//     e.preventDefault()
//     setLoading(true)
//     setGeneratingImg(false)
//     setLoading(false)
// }

// const items = [
//     {
//         prompt: "a whimsical treehouse village nestled in the treetops, connected by rope bridges and ladders",
//         width: 720,
//         height: 1280,
//         seed: 43,
//         model: "flux"
//     },
//     {
//         prompt: "a group of astronauts exploring a distant galaxy, marveling at the wonders of the universet",
//         width: 720,
//         height: 1280,
//         seed: 44,
//         model: "flux"
//     }, {
//         prompt: "a fantasy kingdom with a majestic castle perched on a hill, overlooking the realm",
//         width: 720,
//         height: 1280,
//         seed: 43,
//         model: 'flux'
//     }, {
//         prompt: "a robot chef meticulously preparing a gourmet meal in a high-tech kitchen with advanced appliances",
//         width: 720,
//         height: 1280,
//         seed: 43,
//         model: 'flux'
//     },
//     {
//         prompt: "A futuristic city with flying cars and neon lights",
//         width: 1980,
//         height: 1020,
//         seed: 44,
//         model: 'flux',
//     }
// ];

// const [displayItems, setDisplayItems] = useState([])
